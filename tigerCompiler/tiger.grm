structure A = Absyn

%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | UMINUS

%nonterm  exp of A.exp
  | program of A.exp
  | lvalue of A.var
  | vardec of A.dec
  | dec of A.dec
  | declist of A.dec list
  | expseq of (A.exp * pos) list
  | explist of A.exp list
  | tydec of {name: Symbol.symbol, ty: A.ty, pos: pos}
  | tydecs of {name: Symbol.symbol, ty: A.ty, pos: pos} list
  | ty of A.ty
  | tyfield of A.field
  | tyfields of A.field list
  | fundec of A.fundec
  | fundecs of A.fundec list
  | recordfield of (A.symbol * A.exp * int)
  | recordfields of (A.symbol * A.exp * int) list


%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%right UMINUS

%%

program	: exp				(exp)

exp: lvalue (A.VarExp lvalue)

  | MINUS exp %prec UMINUS (A.OpExp {left=A.IntExp ~1, oper=A.TimesOp, right=exp, pos=MINUSleft})

  | NIL		      (A.NilExp)

  | INT			    (A.IntExp INT)

  | STRING			(A.StringExp (STRING, STRINGleft))

  (*Function calls*)
  | ID LPAREN explist RPAREN       (A.CallExp{func = Symbol.symbol ID, args = explist, pos = IDleft})
  (*Arithmetic Operations*)
  | exp PLUS exp		(A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left})
  | exp MINUS exp		(A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left})
  | exp TIMES exp		(A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left})
  | exp DIVIDE exp	(A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left})
  (*Comparison exp*)
  | exp EQ exp     (A.OpExp {left=exp1, oper=A.EqOp, right=exp2, pos=exp1left})
  | exp NEQ exp    (A.OpExp {left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left})
  | exp LT exp     (A.OpExp {left=exp1, oper=A.LtOp, right=exp2, pos=exp1left})
  | exp LE exp     (A.OpExp {left=exp1, oper=A.LeOp, right=exp2, pos=exp1left})
  | exp GT exp     (A.OpExp {left=exp1, oper=A.GtOp, right=exp2, pos=exp1left})
  | exp GE exp     (A.OpExp {left=exp1, oper=A.GeOp, right=exp2, pos=exp1left})
  (*Bool exp*)
  | exp AND exp    (A.IfExp {test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left})
  | exp OR exp     (A.IfExp {test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=exp1left})
  (*Record*)
  | ID LBRACE recordfields RBRACE      (A.RecordExp {fields=recordfields, typ=Symbol.symbol ID, pos=IDleft})
  (*Array*)
  | ID LBRACK exp RBRACK OF exp        (A.ArrayExp{typ = Symbol.symbol ID, size = exp1, init = exp2, pos = IDleft})
  (*Assign*)
  | lvalue ASSIGN exp                  (A.AssignExp {var=lvalue, exp=exp, pos=lvalueleft})
  (*If then else*)
  | IF exp THEN exp ELSE exp           (A.IfExp {test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})
  | IF exp THEN exp                    (A.IfExp {test=exp1, then'=exp2, else'=NONE, pos=IFleft})
  (*While*)
  | WHILE exp DO exp                   (A.WhileExp {test=exp1, body=exp2, pos=WHILEleft})
  (*For*)
  | FOR ID ASSIGN exp TO exp DO exp    (A.ForExp {var=Symbol.symbol ID, escape= ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft})
  (*Break*)
  | BREAK                              (A.BreakExp (BREAKleft))
  (* Let *)
  (* I think it's fixed*)
  | LET declist IN expseq END          (A.LetExp {decs=declist, body=A.SeqExp expseq, pos=LETleft})
  (*Parenthesis for syntactic grouping*)
  | LPAREN expseq RPAREN               (A.SeqExp expseq)

(*Expression sequence for let*)
expseq:                   (nil)
  | exp                   ([(exp, expleft)])
  | expseq SEMICOLON exp  (expseq @ [(exp, expleft)])

(*List of expressions for function = parameters *)
explist:                (nil)
  | exp                 ([exp])
  | explist COMMA exp   (explist @ [exp])

(* lvalues *)
lvalue: ID                    (A.SimpleVar(Symbol.symbol ID, IDleft))
  | lvalue DOT ID             (A.FieldVar(lvalue, Symbol.symbol ID, lvalueleft))
  | ID LBRACK exp RBRACK      (A.SubscriptVar(A.SimpleVar(Symbol.symbol ID, IDleft), exp, IDleft))
  | lvalue LBRACK exp RBRACK  (A.SubscriptVar(lvalue, exp, lvalueleft))

(*Record stuff*)
recordfields:                      (nil)
  | recordfield                    ([recordfield])
  | recordfields COMMA recordfield (recordfields @ [recordfield])

recordfield: ID EQ exp        ((Symbol.symbol ID, exp, IDleft))

(* Declarations *)
declist: dec  (dec :: nil)
  | dec declist  (dec :: declist)

dec: vardec   (vardec)
  | tydecs    (A.TypeDec (tydecs))
  | fundecs   (A.FunctionDec (fundecs))

(*Data types*)
tydecs: tydec    ([tydec])
  | tydecs tydec (tydecs @ [tydec])

tydec: TYPE ID EQ ty  ({name = Symbol.symbol ID, ty = ty, pos = TYPEleft})

ty: ID                      (A.NameTy(Symbol.symbol ID, IDleft))
  | LBRACE tyfields RBRACE  (A.RecordTy (tyfields))
  | ARRAY OF ID             (A.ArrayTy (Symbol.symbol ID, ARRAYleft))

tyfields:                   (nil)
  |tyfield                  ([tyfield])
  |tyfields COMMA tyfield   (tyfields @ [tyfield])

tyfield: ID COLON ID ({name = Symbol.symbol ID1, escape = ref true, typ = Symbol.symbol ID2, pos = ID1left})

(*Variables*)
vardec: VAR ID ASSIGN exp      (A.VarDec {name=Symbol.symbol ID, init=exp, pos=VARleft, escape= ref true, typ=NONE})
  | VAR ID COLON ID ASSIGN exp (A.VarDec {name=Symbol.symbol ID1, init=exp, pos=VARleft, escape=ref true, typ=SOME(Symbol.symbol ID2, ID2left)})

(*Functions*)
fundecs: fundec ([fundec])
  | fundecs fundec (fundecs @ [fundec])

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp      ({name=Symbol.symbol ID, params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft})
  | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ({name=Symbol.symbol ID1, params=tyfields, result=SOME(Symbol.symbol ID2, ID2left), body=exp, pos=FUNCTIONleft})






